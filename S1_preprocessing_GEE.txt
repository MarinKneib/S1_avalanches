// mosaic images from the same date -> to avoid missing data when combinding acquisitions from different dates which have different footprints.
// This function must hand over all required scene properties (relativeOrbit, system:time_start, etc.)
// ----------------------------
function mosaicByDate(imcol){
  // imcol:   An image collection
  // returns: An image collection
  var imlist = imcol.toList(imcol.size());

  // extract dates from image list by mapping the "extraction function" on the list
  var unique_dates = imlist.map(function(im){
    return ee.Image(im).date().format("YYYY-MM-dd");
  }).distinct(); // remove duplicate dates

  // Map the mosaicing function on each the list of unique dates.
  var mosaic_imlist = unique_dates.map(function(d){
    d = ee.Date(d);
    var im = imcol.filterDate(d, d.advance(1, "day")).mosaic(); // for each date, create a mosaic

    var im_source = imcol.filterDate(d, d.advance(1, "day")).first();
    im = im.set("system:time_start", d.millis(), "system:id", d.format("YYYY-MM-dd"));
    im = im.set("relativeOrbitNumber_start", im_source.get("relativeOrbitNumber_start"));
    // Keep coordinate system of the source images
    im = im.select(['VV','VH']).reproject(im_source.select(['VV']).projection());
    return im;
  });

  return ee.ImageCollection(mosaic_imlist);
}
// end function ---------------------------

// Create a function to convert each element of the system:start_time list into a Date format.
var milli2date = function(millis){
  return ee.Date(millis).format('YYYY-MM-dd HH:mm');
}; 

// Create a function which applies a large-scale lowpass filter
var lowpass2k = function(data){
  var boxcar2k = ee.Kernel.square({ radius: 500, units: 'meters', normalize: true });
  return data.reduceNeighborhood({reducer: ee.Reducer.mean(), kernel: boxcar2k, inputWeight: 'kernel', optimization:'boxcar'})
             .reduceNeighborhood({reducer: ee.Reducer.mean(), kernel: boxcar2k, inputWeight: 'kernel', optimization:'boxcar'});
};


// time range we're interested in
var Start_visualizeDate_list = [ee.Date('2022-07-10'),
                                ee.Date('2022-08-03'),ee.Date('2022-08-15'),
                                ee.Date('2022-08-27'),ee.Date('2022-09-08'),
                                ee.Date('2022-09-20'),ee.Date('2022-10-02')];
                              

// Min/Max dB values  
var RGBmin = -25 ; //dB
var RGBmax =  -6 ; //dB
var diff = RGBmax-RGBmin;

var foldername = "Hispar";
  
// Mask or survey area (to be added as shapefile to assets and loaded)
var mask_ASC = Hispar_Mask_all_ASC.geometry();
var mask_DESC = Hispar_Mask_all_DESC.geometry();

var geometry = Hispar.geometry();
var projection = 'EPSG:32643';

for (var ii = 0; ii<=Start_visualizeDate_list.length; ii++){
  var Start_visualizeDate = Start_visualizeDate_list[ii];
  print(Start_visualizeDate);

  // visualize polygon & zoom to layer
  Map.centerObject(mask_ASC);
  
  // Define point of interest & add buffer
  var polygonToExport_ASC = mask_ASC;
  var polygonToExport_DESC = mask_DESC;
  var polygonWithBuffer_ASC = polygonToExport_ASC.buffer(200);
  var polygonWithBuffer_DESC = polygonToExport_DESC.buffer(200);
  Map.addLayer(polygonWithBuffer_ASC,{},'geometry')
  
  // Define time range to search for images
  var enddate = Start_visualizeDate.advance(0.5, 'month');
  var pastdate = Start_visualizeDate.advance(-0.4, 'month');
  
  // Filter orbit numbers
  var filter_orbitnumber = ee.Filter.and(ee.Filter.gt('relativeOrbitNumber_start', 26), 
                            ee.Filter.lt('relativeOrbitNumber_start', 35));
  //var filter_orbitnumber = ee.Filter.neq('relativeOrbitNumber_start', 12);
  
  // Load the Sentinel-1 ImageCollection which intersects with the defined polygon.
  var vvvh = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filterBounds(mask_ASC)
    .filterDate(pastdate, enddate)
    .sort('system:time_start', true)
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    // Filter to get images collected in interferometric wide swath mode.
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(filter_orbitnumber);
    
  // Print content of image collection in a user-friendly way: (There might be multiple adjacent acquisitions from the same orbit). They need to be moasaiced first.
  var vvvh_sorted = vvvh.sort('system:time_start', false);
  
  // extract Orbit from all found images:
  var orb1 = vvvh_sorted.aggregate_array('relativeOrbitNumber_start'); 
  print(orb1)
  
  // Extract date as string array from the system:time_start property
  var orb2 = vvvh_sorted.aggregate_array('system:time_start').map(milli2date);
  print(orb2)
  
  // Split selected images into ascending and descending orbits
  var vvvhAsc = vvvh.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));
  var vvvhDes = vvvh.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
  
  // Select a few images after the defined visualizeDate 
  var ascFut = vvvhAsc.filterDate(Start_visualizeDate, enddate);
  var desFut = vvvhDes.filterDate(Start_visualizeDate, enddate);
  
  // Mosaic by date
  ascFut = mosaicByDate(ascFut);
  desFut = mosaicByDate(desFut);
  
  // get the first acquired image.
  var ascSel1 = ascFut.first();
  var desSel1 = desFut.first(); 
  
  // Create filename for exported image (first scene)
  var filename_asc = ascSel1.date().format('YYYYMMdd');
  print(ascSel1.date());
  
  // Select past images with the same orbit as the selected first image
  // there might be multiple images for the same date. They need to be mosaiced.
  var ascPast = vvvhAsc.filterDate(pastdate, Start_visualizeDate);//.filter(ee.Filter.eq('relativeOrbitNumber_start', ascSel1.get('relativeOrbitNumber_start')));
  
  print(ascPast.aggregate_array('system:time_start').map(milli2date))
  // Mosaic by date (when there are several images at the same date)
  ascPast = mosaicByDate(ascPast);
  
  // Select previous image (with same orbit) which is at least 1 day before the first image (6 day repeat pass)
  var ascSel2 = ascPast.filterDate(pastdate, ascSel1.date().advance(-7, 'day')).sort('system:time_start', false).first();
 
  print(ascSel2.date());
  
  // Add selected dates to filename (from second scene)
  filename_asc = ee.String('GEE_ASC_').cat(ascSel2.date().format('YYYYMMdd')).cat('_').cat(filename_asc);
  
  // Lowpass filter over VV & VH
  var ASC_VH1_low = lowpass2k(ascSel1.select('VH'));
  var ASC_VV1_low = lowpass2k(ascSel1.select('VV'));
  var ASC_VH2_low = lowpass2k(ascSel2.select('VH'));
  var ASC_VV2_low = lowpass2k(ascSel2.select('VV'));
  
  // average filtered polarizations
  var ASC_VH12_low = ASC_VH1_low.add(ASC_VH2_low).divide(2);
  var ASC_VV12_low = ASC_VV1_low.add(ASC_VV2_low).divide(2);
  
  // apply filter
  var ASC_VH1_high = ascSel1.select('VH').subtract(ASC_VH1_low).add(ASC_VH12_low);
  var ASC_VH2_high = ascSel2.select('VH').subtract(ASC_VH2_low).add(ASC_VH12_low);
  var ASC_VV1_high = ascSel1.select('VV').subtract(ASC_VV1_low).add(ASC_VV12_low);
  var ASC_VV2_high = ascSel2.select('VV').subtract(ASC_VV2_low).add(ASC_VV12_low);
  
  // Average polarizations 
  var ASC1_hp2 = ASC_VV1_high.add(ASC_VH1_high).divide(2);
  var ASC2_hp2 = ASC_VV2_high.add(ASC_VH2_high).divide(2);

  // clip to bounds
  ASC1_hp2 = ASC1_hp2.where(ASC1_hp2.lt(RGBmin), RGBmin);
  ASC1_hp2 = ASC1_hp2.where(ASC1_hp2.gt(RGBmax), RGBmax);
  ASC2_hp2 = ASC2_hp2.where(ASC2_hp2.lt(RGBmin), RGBmin);
  ASC2_hp2 = ASC2_hp2.where(ASC2_hp2.gt(RGBmax), RGBmax);
  
  // Clamp bands in the range [0,1]
  ASC2_hp2 = ASC2_hp2.subtract(RGBmin).divide(diff);
  ASC1_hp2 = ASC1_hp2.subtract(RGBmin).divide(diff);
  
  // creat RGB composite
  var ASCcomposite_clamp = ee.Image.cat([ASC2_hp2, ASC1_hp2, ASC2_hp2]);
  
  // Clip the image collection to the polygon
  ASCcomposite_clamp = ASCcomposite_clamp.clip(polygonWithBuffer_ASC)

  var filename_desc = desSel1.date().format('YYYYMMdd');
  //print(desSel1.date());
  
  var desPast = vvvhDes.filterDate(pastdate, Start_visualizeDate);//.filter(ee.Filter.eq('relativeOrbitNumber_start', desSel1.get('relativeOrbitNumber_start'))); 

  desPast = mosaicByDate(desPast);

  var desSel2 = desPast.filterDate(pastdate, desSel1.date().advance(-7, 'day')).sort('system:time_start', false).first();
  //print(desSel2.date());

  // Do the same for descending images
  filename_desc = ee.String('GEE_DESC_').cat(desSel2.date().format('YYYYMMdd')).cat('_').cat(filename_desc);

  var DESC_VH1_low = lowpass2k(desSel1.select('VH'));
  var DESC_VV1_low = lowpass2k(desSel1.select('VV'));
  var DESC_VH2_low = lowpass2k(desSel2.select('VH'));
  var DESC_VV2_low = lowpass2k(desSel2.select('VV'));

  var DESC_VH12_low = DESC_VH1_low.add(DESC_VH2_low).divide(2);
  var DESC_VV12_low = DESC_VV1_low.add(DESC_VV2_low).divide(2);

  var DESC_VH1_high = desSel1.select('VH').subtract(DESC_VH1_low).add(DESC_VH12_low);
  var DESC_VH2_high = desSel2.select('VH').subtract(DESC_VH2_low).add(DESC_VH12_low);
  var DESC_VV1_high = desSel1.select('VV').subtract(DESC_VV1_low).add(DESC_VV12_low);
  var DESC_VV2_high = desSel2.select('VV').subtract(DESC_VV2_low).add(DESC_VV12_low);

  var DESC1_hp2 = DESC_VV1_high.add(DESC_VH1_high).divide(2);
  var DESC2_hp2 = DESC_VV2_high.add(DESC_VH2_high).divide(2);

  DESC1_hp2 = DESC1_hp2.where(DESC1_hp2.lt(RGBmin), RGBmin);
  DESC1_hp2 = DESC1_hp2.where(DESC1_hp2.gt(RGBmax), RGBmax);
  DESC2_hp2 = DESC2_hp2.where(DESC2_hp2.lt(RGBmin), RGBmin);
  DESC2_hp2 = DESC2_hp2.where(DESC2_hp2.gt(RGBmax), RGBmax);

  DESC2_hp2 = DESC2_hp2.subtract(RGBmin).divide(diff);
  DESC1_hp2 = DESC1_hp2.subtract(RGBmin).divide(diff);

  var DESCcomposite_clamp = ee.Image.cat([DESC2_hp2, DESC1_hp2, DESC2_hp2]);

  // Export images to Google drive
  Export.image.toDrive({
    image: ASCcomposite_clamp,
    description: filename_asc.getInfo(),
    scale: 10,
    crs:projection,
    folder:foldername
  });
  Map.addLayer(ASCcomposite_clamp, {}, 'RGB ASC');  
  
  //DESCcomposite_clamp = DESCcomposite_clamp.clip(polygonWithBuffer_DESC);
  //Export.image.toDrive({
  //  image: DESCcomposite_clamp,
  //  description: filename_desc.getInfo(),
  //  scale: 10,
  //  crs:projection,
  //  folder:foldername
  //});
  //Map.addLayer(DESCcomposite_clamp, {}, 'RGB DESC'); 
}
